{"data":{"site":{"siteMetadata":{"title":"Δ coding dΔnce","author":"Marvin Frachet"}},"markdownRemark":{"id":"dc2fe291-bc02-559f-b834-182eda4100ee","excerpt":"Closure is a functional programming tool that allows to  capture  information (aka variable) from a parent function and to completely encapsulate\nit in a child…","html":"<p>Closure is a functional programming tool that allows to <strong>capture</strong> information (aka variable) from a parent function and to completely encapsulate\nit in a child function. This way, this information can’t be accessed outside the child and is scoped.</p>\n<p>In “old” JavaScript, we used to create closures this way:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> x\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> add2 <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// encapsulate the value 2 and create a function</span>\n<span class=\"token keyword\">var</span> six <span class=\"token operator\">=</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// the result is 6</span></code></pre></div>\n<p>With the new ES features, we can use the arrow function notation to make it one line:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">+</span> x</code></pre></div>\n<p>Where <code class=\"language-text\">x =&gt; /* ... */</code> is the parent function and <code class=\"language-text\">n =&gt; /* ... */</code> is the child function.</p>\n<h2 id=\"spicy-closure-with-curry\"><a href=\"#spicy-closure-with-curry\" aria-label=\"spicy closure with curry permalink\" class=\"title-anchor\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M12.971 352h32.394C67.172 454.735 181.944 512 288 512c106.229 0 220.853-57.38 242.635-160h32.394c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0l-67.029 67.029c-7.56 7.56-2.206 20.485 8.485 20.485h35.146c-20.29 54.317-84.963 86.588-144.117 94.015V256h52c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-52v-5.47c37.281-13.178 63.995-48.725 64-90.518C384.005 43.772 341.605.738 289.37.01 235.723-.739 192 42.525 192 96c0 41.798 26.716 77.35 64 90.53V192h-52c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h52v190.015c-58.936-7.399-123.82-39.679-144.117-94.015h35.146c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0L4.485 331.515C-3.074 339.074 2.28 352 12.971 352zM288 64c17.645 0 32 14.355 32 32s-14.355 32-32 32-32-14.355-32-32 14.355-32 32-32z\"/><script xmlns=\"\"/></svg></a>Spicy closure with curry</h2>\n<p>Curry is a principle that allows to use a function that usually takes n arguments by passing only one argument at a time. It strongly relies\non the closure approach to encapsulate the different arguments between the different function calls.</p>\n<p>Each call to a curry function will return a new function with one argument. When the number of returned functions reaches the arity (number of arguments)\nof the initial function, the real result is returned.</p>\n<p>It seems quite complicated but not that much, let’s take the example of an <code class=\"language-text\">add</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">+</span> x\n\n<span class=\"token comment\">// using a standard approach</span>\n<span class=\"token keyword\">const</span> seven <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// using a curry approach</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">curry</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> curryAdd <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"add\" is the \"fn\" in the curry definition</span>\n<span class=\"token keyword\">const</span> curryAdd2 <span class=\"token operator\">=</span> <span class=\"token function\">curryAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// curryAdd is the \"x => /*...*/\" function</span>\n<span class=\"token keyword\">const</span> six <span class=\"token operator\">=</span> <span class=\"token function\">curryAdd2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// curryAdd2 is the \"n => /*...*/\" function</span></code></pre></div>\n<h2 id=\"why-to-use-such-a-verbose-approach\"><a href=\"#why-to-use-such-a-verbose-approach\" aria-label=\"why to use such a verbose approach permalink\" class=\"title-anchor\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M12.971 352h32.394C67.172 454.735 181.944 512 288 512c106.229 0 220.853-57.38 242.635-160h32.394c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0l-67.029 67.029c-7.56 7.56-2.206 20.485 8.485 20.485h35.146c-20.29 54.317-84.963 86.588-144.117 94.015V256h52c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-52v-5.47c37.281-13.178 63.995-48.725 64-90.518C384.005 43.772 341.605.738 289.37.01 235.723-.739 192 42.525 192 96c0 41.798 26.716 77.35 64 90.53V192h-52c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h52v190.015c-58.936-7.399-123.82-39.679-144.117-94.015h35.146c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0L4.485 331.515C-3.074 339.074 2.28 352 12.971 352zM288 64c17.645 0 32 14.355 32 32s-14.355 32-32 32-32-14.355-32-32 14.355-32 32-32z\"/><script xmlns=\"\"/></svg></a>Why to use such a verbose approach?</h2>\n<h3 id=\"composability\"><a href=\"#composability\" aria-label=\"composability permalink\" class=\"title-anchor\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M12.971 352h32.394C67.172 454.735 181.944 512 288 512c106.229 0 220.853-57.38 242.635-160h32.394c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0l-67.029 67.029c-7.56 7.56-2.206 20.485 8.485 20.485h35.146c-20.29 54.317-84.963 86.588-144.117 94.015V256h52c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-52v-5.47c37.281-13.178 63.995-48.725 64-90.518C384.005 43.772 341.605.738 289.37.01 235.723-.739 192 42.525 192 96c0 41.798 26.716 77.35 64 90.53V192h-52c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h52v190.015c-58.936-7.399-123.82-39.679-144.117-94.015h35.146c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0L4.485 331.515C-3.074 339.074 2.28 352 12.971 352zM288 64c17.645 0 32 14.355 32 32s-14.355 32-32 32-32-14.355-32-32 14.355-32 32-32z\"/><script xmlns=\"\"/></svg></a>Composability</h3>\n<p>In functional programming it’s pretty common to compose multiple functions between them to create new and more complex\nones using the curry approach.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> g</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token function\">g</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addOne</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">const</span> addTwo <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  addOne<span class=\"token punctuation\">,</span> <span class=\"token comment\">// \"f\" in the compose definition</span>\n  addOne <span class=\"token comment\">// \"g\" in the compose definition</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// addTwo is \"x => /* ... */\" with f and g encapsulated or \"closed\"</span>\n<span class=\"token comment\">// \"2\" is the x in the compose definition</span>\n<span class=\"token keyword\">const</span> four <span class=\"token operator\">=</span> <span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> addFour <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  addTwo<span class=\"token punctuation\">,</span>\n  addTwo\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> eight <span class=\"token operator\">=</span> <span class=\"token function\">addFour</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>By using composition, we prefer to build simple functions that combine easily together.</p>\n<p>If you have given attention to the previous examples, you’ve probably seen\nthat all the functions used own an arity of 1: it’s a contract dealing with curry functions that allows such composition.\nIt would be quite harder to compose functions with multiple arguments.</p>\n<p>Another thing that you may have noticed is that the type of the argument of <code class=\"language-text\">f</code> is the type of the output of <code class=\"language-text\">g</code>. We need that contract\nto use compose effectively.</p>\n<h3 id=\"reusability\"><a href=\"#reusability\" aria-label=\"reusability permalink\" class=\"title-anchor\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M12.971 352h32.394C67.172 454.735 181.944 512 288 512c106.229 0 220.853-57.38 242.635-160h32.394c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0l-67.029 67.029c-7.56 7.56-2.206 20.485 8.485 20.485h35.146c-20.29 54.317-84.963 86.588-144.117 94.015V256h52c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-52v-5.47c37.281-13.178 63.995-48.725 64-90.518C384.005 43.772 341.605.738 289.37.01 235.723-.739 192 42.525 192 96c0 41.798 26.716 77.35 64 90.53V192h-52c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h52v190.015c-58.936-7.399-123.82-39.679-144.117-94.015h35.146c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0L4.485 331.515C-3.074 339.074 2.28 352 12.971 352zM288 64c17.645 0 32 14.355 32 32s-14.355 32-32 32-32-14.355-32-32 14.355-32 32-32z\"/><script xmlns=\"\"/></svg></a>Reusability</h3>\n<p>As mentioned earlier, closures are a way to encapsulate variables and information for later use.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createModulo</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">%</span> x <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">and</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> g</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> isMultipleOfThree <span class=\"token operator\">=</span> <span class=\"token function\">createModulo</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> isMultipleOfFive <span class=\"token operator\">=</span> <span class=\"token function\">createModulo</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> isMultipleOfFifteen <span class=\"token operator\">=</span> <span class=\"token function\">and</span><span class=\"token punctuation\">(</span>isMultipleOfThree<span class=\"token punctuation\">,</span> isMultipleOfFive<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// result is [30, 15]</span>\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isMultipleOfFifteen<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The contracts of the <code class=\"language-text\">isMultipleOfThree</code> and <code class=\"language-text\">isMultipleOfFive</code> functions are the fact that they accept one\nvalue to be compared. The <code class=\"language-text\">x</code> value is encapsulated and hidden for later use in the closure function.</p>\n<hr>\n<p>All of this is possible thanks to the open nature of JavaScript. We can apply simple functional programming concepts\nto create powerful and maintainable software using stateless approaches with ease.</p>\n<p>I suggest you give a try to the functional programming (FP) approach and check how it impacts the way you think and code,\neven in a prototype / OOP world.</p>\n<p>JavaScript &#x26; FP rock together!</p>","frontmatter":{"title":"Unleash the curry: the power of closure","date":"December 15, 2018","tags":["ecmascript","functional programming","javascript"]},"fields":{"slug":"/unleash-the-curry-the-power-of-closure/","readingTime":{"minutes":3.345}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/unleash-the-curry-the-power-of-closure/","previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello world","tags":["chore","global"]}},"next":{"fields":{"slug":"/tagged-template-literals/"},"frontmatter":{"title":"Tagged template literals","tags":["ecmascript","javascript"]}}}}
{"data":{"site":{"siteMetadata":{"title":"Œî coding dŒînce","author":"Marvin Frachet"}},"markdownRemark":{"id":"73e5f159-5a33-5acd-ba25-854a51c4784d","excerpt":"It‚Äôs been a time since the React‚Äôs team has introduced Suspense and concurrent rendering. With hooks, it‚Äôs the new amazing feature that React is providing. We‚Ä¶","html":"<p>It‚Äôs been a time since the React‚Äôs team has introduced Suspense and concurrent rendering. With hooks, it‚Äôs the new amazing feature that React is providing.</p>\n<p>We are ‚Äúable‚Äù (at least in dev-mode) to:</p>\n<ul>\n<li>create applications that manage specific priorities over our asynchronous operations</li>\n<li>manage asynchronous computations just like if they were synchronous</li>\n<li>use functional components everywhere instead of classes</li>\n</ul>\n<p>I‚Äôm really excited about the future of React!</p>\n<hr>\n<p>And today, I wanted to talk about a <code class=\"language-text\">Suspense</code> specific feature which is the <code class=\"language-text\">lazy</code> function that was introduced in <a href=\"https://reactjs.org/blog/2018/10/23/react-v-16-6.html\">React v16.6</a>.</p>\n<p>This function aims to provide a simple way to rely on bundler‚Äôs code splitting using some code like:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> lazy<span class=\"token punctuation\">,</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> LazyComponent <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./components/myComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Waiting...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LazyComponent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"What-the\"><a href=\"#What-the\" aria-label=\"What the permalink\" class=\"custom-class\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M12.971 352h32.394C67.172 454.735 181.944 512 288 512c106.229 0 220.853-57.38 242.635-160h32.394c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0l-67.029 67.029c-7.56 7.56-2.206 20.485 8.485 20.485h35.146c-20.29 54.317-84.963 86.588-144.117 94.015V256h52c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-52v-5.47c37.281-13.178 63.995-48.725 64-90.518C384.005 43.772 341.605.738 289.37.01 235.723-.739 192 42.525 192 96c0 41.798 26.716 77.35 64 90.53V192h-52c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h52v190.015c-58.936-7.399-123.82-39.679-144.117-94.015h35.146c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0L4.485 331.515C-3.074 339.074 2.28 352 12.971 352zM288 64c17.645 0 32 14.355 32 32s-14.355 32-32 32-32-14.355-32-32 14.355-32 32-32z\"/><script xmlns=\"\"/></svg></a>What the?..</h2>\n<p>It can be a bit disturbing at first, how can we:</p>\n<ul>\n<li>code split our code, which is a build time feature</li>\n<li>make an asychronous computation that creates a component</li>\n<li>use an (async?) component in a render function which aims to be synchronous</li>\n</ul>\n<p>using 2-3 lines?‚Ä¶!</p>\n<p><img src=\"https://media.giphy.com/media/pPhyAv5t9V8djyRFJH/giphy.gif\" alt=\"What the?..\"></p>\n<h2 id=\"Suspenseü§Ø\"><a href=\"#Suspense%F0%9F%A4%AF\" aria-label=\"Suspenseü§Ø permalink\" class=\"custom-class\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M12.971 352h32.394C67.172 454.735 181.944 512 288 512c106.229 0 220.853-57.38 242.635-160h32.394c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0l-67.029 67.029c-7.56 7.56-2.206 20.485 8.485 20.485h35.146c-20.29 54.317-84.963 86.588-144.117 94.015V256h52c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-52v-5.47c37.281-13.178 63.995-48.725 64-90.518C384.005 43.772 341.605.738 289.37.01 235.723-.739 192 42.525 192 96c0 41.798 26.716 77.35 64 90.53V192h-52c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h52v190.015c-58.936-7.399-123.82-39.679-144.117-94.015h35.146c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0L4.485 331.515C-3.074 339.074 2.28 352 12.971 352zM288 64c17.645 0 32 14.355 32 32s-14.355 32-32 32-32-14.355-32-32 14.355-32 32-32z\"/><script xmlns=\"\"/></svg></a>Suspense‚Ä¶ü§Ø</h2>\n<p>This is not <em>that</em> magic and can exist thanks to the <code class=\"language-text\">Suspense</code> component.</p>\n<p>This component is a bit special and whenever you will <code class=\"language-text\">throw</code> a <code class=\"language-text\">Promise</code> in one of its children, it will <code class=\"language-text\">catch</code> that promise, resolve it and re-render its children.</p>\n<p><em>Did you know that you were able to throw something else than errors in JavaScript?!</em></p>\n<p>This is why it‚Äôs called <code class=\"language-text\">Suspense</code>: it <em>suspends</em> the normal execution flow of your application thanks to the <code class=\"language-text\">throw</code> keyword, and make some specific computations before ‚Äúresuming‚Äù it. It doesn‚Äôt resume it at the exact position of your code, but at least, it re-renders its children <strong>which make you feel like you were getting back to the old execution position</strong>.</p>\n<p>I tried to write about it in <a href=\"https://medium.com/free-code-camp/react-cache-time-slicing-and-fetching-with-a-synchronous-api-2a57dc9c2e6d\">this Medium post</a> but without success - my thoughts at that period were not that organised.</p>\n<p>I won‚Äôt keep the ‚Äúsuspense‚Äù for now, so let‚Äôs check <em>one</em> implementation of the <code class=\"language-text\">lazy</code> function I‚Äôve came across:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token constant\">IDS</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> loaded <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">lazy</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">modulePathResolver</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token constant\">IDS</span><span class=\"token operator\">++</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> LoadedComponent <span class=\"token operator\">=</span> loaded<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LoadedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>LoadedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">throw</span> <span class=\"token function\">modulePathResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lazyModule</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> Component <span class=\"token operator\">=</span> lazyModule<span class=\"token punctuation\">.</span>default\n      loaded<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Component\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a href=\"https://gist.github.com/mfrachet/a04cc57a500de85170e2ade4b9406305\">It‚Äôs available on github gist if you want to play with it.</a></strong></p>\n<p>Obviously, this snippet only works if the component is used inside a <code class=\"language-text\">Suspense</code> parent.</p>\n<p>The <code class=\"language-text\">lazy</code> function accepts one argument <code class=\"language-text\">modulePathResolver</code> which is a <code class=\"language-text\">Promise</code> that resolved the module containing your <em>lazy</em> component.</p>\n<p>The <code class=\"language-text\">lazy</code> function returns a function which is in fact a (functional) component. All the references to <code class=\"language-text\">id</code> exist only to make sure that the component has only loaded once.</p>\n<p>If you take a closer look at the code, it really looks like a cache system, but instead of setting the cached value directly, it <code class=\"language-text\">throw</code>s a promise that wraps the cache setting so that the Suspense parent can resolve it, <em>lazily</em>.</p>\n<p>And you know what? Since it‚Äôs an asynchronous operation, it can take some time to execute, milliseconds, seconds or even minutes. And what is displayed <em>during</em> the asynchronous resolution? The <code class=\"language-text\">fallback</code> prop of the <code class=\"language-text\">Suspense</code> component is displayed! Nothing more!</p>\n<h2 id=\"And-now-what\"><a href=\"#And-now-what\" aria-label=\"And now what permalink\" class=\"custom-class\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M12.971 352h32.394C67.172 454.735 181.944 512 288 512c106.229 0 220.853-57.38 242.635-160h32.394c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0l-67.029 67.029c-7.56 7.56-2.206 20.485 8.485 20.485h35.146c-20.29 54.317-84.963 86.588-144.117 94.015V256h52c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-52v-5.47c37.281-13.178 63.995-48.725 64-90.518C384.005 43.772 341.605.738 289.37.01 235.723-.739 192 42.525 192 96c0 41.798 26.716 77.35 64 90.53V192h-52c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h52v190.015c-58.936-7.399-123.82-39.679-144.117-94.015h35.146c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0L4.485 331.515C-3.074 339.074 2.28 352 12.971 352zM288 64c17.645 0 32 14.355 32 32s-14.355 32-32 32-32-14.355-32-32 14.355-32 32-32z\"/><script xmlns=\"\"/></svg></a>And now, what?</h2>\n<p>You have an idea of the way the <code class=\"language-text\">lazy</code> function is working but you also now know how <code class=\"language-text\">Suspense</code> is working. You can now imagine every kind of asynchronous resolution without creating <code class=\"language-text\">isLoading</code> states everywhere, every-time. What about lazy image loading with low-high quality pictures üòâ?</p>\n<p>Jared Palmer is really good advocate of this and has talked about it in multiple talks he has given like the one at <a href=\"https://www.youtube.com/watch?v=u_0ZMiQZr0k\">Chain React 2019</a></p>\n<p>My point on this feature is that it also pushes the side effect computations we use to make to the edge of our applications. We can make asynchronous stuff using synchronous APIs without headaches. It makes me think of monads and the capability to isolate and compose what causes (side) effects with trivial code.</p>\n<p>Isn‚Äôt this pretty cool?!</p>\n<p>Happy coding everyone! React has some beautiful days to come! üöÄ</p>","frontmatter":{"title":"Implementing the React.lazy() function by hand","date":"July 31, 2019","tags":["react","javascript"]},"fields":{"slug":"/implementing-react-lazy/","readingTime":{"minutes":3.55}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/implementing-react-lazy/","previous":{"fields":{"slug":"/a-tale-of-bounded-components/"},"frontmatter":{"title":"A tale of bounded components","tags":["react","javascript"]}},"next":null}}
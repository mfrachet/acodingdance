{"data":{"site":{"siteMetadata":{"title":"Δ coding dΔnce","author":"Marvin Frachet"}},"markdownRemark":{"id":"629c78d4-483e-5c6e-9477-4ca856218ffc","excerpt":"Since recently, with the new ES features, it’s possible to use back ticks to interpolate variable values inside strings: It clearly simplifies the way we…","html":"<p>Since recently, with the new ES features, it’s possible to use back ticks to interpolate variable values inside strings:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Marvin'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"Hello Marvin\"</span></code></pre></div>\n<p>It clearly simplifies the way we concatenate information inside a text content variable.</p>\n<p>It’s a feature known as template literals. In fact, it’s only a bit of what we can achieve using template literals.</p>\n<h2 id=\"Tagging-a-string-to-create-behavior\"><a href=\"#Tagging-a-string-to-create-behavior\" aria-label=\"Tagging a string to create behavior permalink\" class=\"title-anchor\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M12.971 352h32.394C67.172 454.735 181.944 512 288 512c106.229 0 220.853-57.38 242.635-160h32.394c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0l-67.029 67.029c-7.56 7.56-2.206 20.485 8.485 20.485h35.146c-20.29 54.317-84.963 86.588-144.117 94.015V256h52c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-52v-5.47c37.281-13.178 63.995-48.725 64-90.518C384.005 43.772 341.605.738 289.37.01 235.723-.739 192 42.525 192 96c0 41.798 26.716 77.35 64 90.53V192h-52c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h52v190.015c-58.936-7.399-123.82-39.679-144.117-94.015h35.146c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0L4.485 331.515C-3.074 339.074 2.28 352 12.971 352zM288 64c17.645 0 32 14.355 32 32s-14.355 32-32 32-32-14.355-32-32 14.355-32 32-32z\"/><script xmlns=\"\"/></svg></a>Tagging a string to create behavior</h2>\n<p>If you’ve been working with styled components, you may have seen code that looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> margin <span class=\"token operator\">=</span> <span class=\"token string\">'0 auto'</span>\n\n<span class=\"token keyword\">const</span> Wrapper <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token string\">`\n  width: 1024px;\n  margin: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>margin<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n`</span></span></code></pre></div>\n<p>This syntax is not something that we use to see in other languages. Is this a function? A function call? What does it mean to concatenate such a string just after that <code class=\"language-text\">styled.div</code>?</p>\n<p>On this snippet, the <code class=\"language-text\">styled.div</code> information is a tag for template literal that provides <strong>a specific behavior</strong> to the following string. The string only acts as a declarative representation and customization of a <code class=\"language-text\">styled.div</code>.</p>\n<h2 id=\"Creating-a-tagged-template-literal\"><a href=\"#Creating-a-tagged-template-literal\" aria-label=\"Creating a tagged template literal permalink\" class=\"title-anchor\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M12.971 352h32.394C67.172 454.735 181.944 512 288 512c106.229 0 220.853-57.38 242.635-160h32.394c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0l-67.029 67.029c-7.56 7.56-2.206 20.485 8.485 20.485h35.146c-20.29 54.317-84.963 86.588-144.117 94.015V256h52c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-52v-5.47c37.281-13.178 63.995-48.725 64-90.518C384.005 43.772 341.605.738 289.37.01 235.723-.739 192 42.525 192 96c0 41.798 26.716 77.35 64 90.53V192h-52c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h52v190.015c-58.936-7.399-123.82-39.679-144.117-94.015h35.146c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0L4.485 331.515C-3.074 339.074 2.28 352 12.971 352zM288 64c17.645 0 32 14.355 32 32s-14.355 32-32 32-32-14.355-32-32 14.355-32 32-32z\"/><script xmlns=\"\"/></svg></a>Creating a tagged template literal</h2>\n<p>One of the thing I really appreciate with template literals is their <strong>declarative</strong> syntax. Over the years, with HTML, JSX and so forth, it has proven to be an excellent way to represent contextual information.</p>\n<p>We can use a <code class=\"language-text\">html</code> template literal like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">User</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  html<span class=\"token template-string\"><span class=\"token string\">`\n    &lt;div>&lt;h1>Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/h1>&lt;/div>\n  `</span></span></code></pre></div>\n<p>Only by reading the 4 lines snippet, you may have a good idea of what it should do:</p>\n<blockquote>\n<p>creating a HTML tree with the concatenated string content.</p>\n</blockquote>\n<p>Let’s implement the <code class=\"language-text\">html</code> tag:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">html</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>interpolated</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  strings<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">content<span class=\"token punctuation\">,</span> currentString<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newValue <span class=\"token operator\">=</span> interpolated<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span> <span class=\"token comment\">// does it exist an argument for that string position?</span>\n\n    <span class=\"token keyword\">return</span> content <span class=\"token operator\">+</span> currentString <span class=\"token operator\">+</span> newValue\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It’s just a function!</p>\n<p>The first argument <code class=\"language-text\">strings</code> is an array containing all of the strings that are NOT interpolated. The array is built by splitting the content of the block before each information that needs to be interpolated.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'\\n    &lt;div>Hello '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;/div>\\n  '</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// strings representation</span></code></pre></div>\n<p>The second argument <code class=\"language-text\">...interpolated</code> is an array holding all of the interpolated values. As you may have noticed, I’ve been “forced” to spread the arguments: we don’t know how much values we get using tagged template literals. If you know how much argument you need to deal with, you’d better use these argument and name them.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Marvin'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// ...interpolated representation</span></code></pre></div>\n<h2 id=\"Run-it-in-a-real-context\"><a href=\"#Run-it-in-a-real-context\" aria-label=\"Run it in a real context permalink\" class=\"title-anchor\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M12.971 352h32.394C67.172 454.735 181.944 512 288 512c106.229 0 220.853-57.38 242.635-160h32.394c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0l-67.029 67.029c-7.56 7.56-2.206 20.485 8.485 20.485h35.146c-20.29 54.317-84.963 86.588-144.117 94.015V256h52c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-52v-5.47c37.281-13.178 63.995-48.725 64-90.518C384.005 43.772 341.605.738 289.37.01 235.723-.739 192 42.525 192 96c0 41.798 26.716 77.35 64 90.53V192h-52c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h52v190.015c-58.936-7.399-123.82-39.679-144.117-94.015h35.146c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0L4.485 331.515C-3.074 339.074 2.28 352 12.971 352zM288 64c17.645 0 32 14.355 32 32s-14.355 32-32 32-32-14.355-32-32 14.355-32 32-32z\"/><script xmlns=\"\"/></svg></a>Run it in a real context</h2>\n<p>Here’s a little codesandbox that shows how it works in real world. Feel free to play and have fun with this awesome feature!</p>\n<iframe src=\"https://codesandbox.io/embed/7mvjnkpmm0?fontsize=12&module=%2Fsrc%2Findex.js\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<hr>\n<p>Tagged template are used by <a href=\"https://github.com/Polymer/lit-html\">lit-html</a> to provide a declarative API to build frontend applications using JavaScript standards. It’s also used by many other libraries to handle things like styles (<a href=\"https://www.styled-components.com/\">styled-components</a>, <a href=\"https://emotion.sh/\">emotion</a> etc…).</p>","frontmatter":{"title":"Tagged template literals","date":"December 17, 2018","tags":["ecmascript","javascript"]},"fields":{"slug":"/tagged-template-literals/","readingTime":{"minutes":2.455}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/tagged-template-literals/","previous":{"fields":{"slug":"/unleash-the-curry-the-power-of-closure/"},"frontmatter":{"title":"Unleash the curry: the power of closure","tags":["ecmascript","functional programming","javascript"]}},"next":{"fields":{"slug":"/tasting-the-future-the-new-react-native-architecture/"},"frontmatter":{"title":"Tasting the future: the new React Native architecture","tags":["react","react-native","javascript"]}}}}